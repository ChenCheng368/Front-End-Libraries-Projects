//--------------------html----------------------------------
<script src="https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js"></script>

<div class="container" id="app"></div>



//----------------------JS---------------------------------
const Provider = ReactRedux.Provider;
const connect = ReactRedux.connect;
const UPDATE = 'UPDATE';

const renderer = new marked.Renderer();

// Allows line break with return button
marked.setOptions({
  breaks: true,
  sanitize: true
});

// Action Creator
const updateText = (text) => { 
  return { type: UPDATE, payload: text } 
}

const initialState = `# Welcome to my React Markdown Previewer!

## This is a sub-heading...
### And here's some other cool stuff:
  
Heres some code, \`<div></div>\`, between 2 backticks.

\`\`\`
// this is multi-line code:

function anotherExample(firstLine, lastLine) {
  if (firstLine == '\`\`\`' && lastLine == '\`\`\`') {
    return multiLineCode;
  }
}
\`\`\`
  
You can also make text **bold**... whoa!
Or _italic_.
Or... wait for it... **_both!_**
And feel free to go crazy ~~crossing stuff out~~.

There's also [links](https://www.freecodecamp.com), and
> Block Quotes!

And if you want to get really crazy, even tables:

Wild Header | Crazy Header | Another Header?
------------ | ------------- | ------------- 
Your content can | be here, and it | can be here....
And here. | Okay. | I think we get it.

- And of course there are lists.
  - Some are bulleted.
     - With different indentation levels.
        - That look like this.


1. And there are numbererd lists too.
1. Use just 1s if you want! 
1. But the list goes on...
- Even if you use dashes or asterisks.
* And last but not least, let's not forget embedded images:

![React Logo w/ Text](https://goo.gl/Umyytc)
`;

// Reducer
const textReducer = (state=initialState, action) => { 
  switch(action.type){
    case UPDATE: 
      return action.payload;
    default: 
      return state;
  }
}

// Presentational Component
class Markdown extends React.Component {
  constructor(props) {
    super(props)
    this.handleChange = this.handleChange.bind(this);
    this.createMarkup = this.createMarkup.bind(this);
  }
  handleChange(event) {
    this.props.updateText(event.target.value);
  }
  createMarkup() {
    return {
      __html: marked(this.props.text)
    }
  }
  render() {
    return (
      <div id='main-box'>
        <div id='up'>
        <textarea id="editor" rows="15" className="form-control" onChange={this.handleChange} value={this.props.text}></textarea>
        </div>
        
        <div id='down'>
          <div id="preview" dangerouslySetInnerHTML={ this.createMarkup() }>
          </div>
        </div>
        
      </div>
    )
  }
}

const mapStateToProps = (state) => { return { text: state } }
const mapDispatchToProps = (dispatch) => Redux.bindActionCreators({updateText}, dispatch)
const MarkdownContainer = connect(mapStateToProps, mapDispatchToProps)(Markdown);

const store = Redux.createStore(textReducer);

ReactDOM.render(
  <Provider store={store}>
    <div>
      <MarkdownContainer />
    </div>
  </Provider>,
  document.getElementById('app')
);

